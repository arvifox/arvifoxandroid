buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.dokka:dokka-android-gradle-plugin:0.9.17"
    }
}

apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'androidx.navigation.safeargs'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

apply plugin: 'org.jetbrains.dokka-android'

// Creates a variable called keystorePropertiesFile, and initializes it to the
// keys.properties file.
def keystorePropertiesFile = rootProject.file("mykeys.properties")
// Initializes a new Properties() object called keystoreProperties.
def keystoreProperties = new Properties()
// Loads the keys.properties file into the keystoreProperties object.
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    signingConfigs {
        configrelease {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }
    compileSdkVersion 29
    buildToolsVersion '29.0.3'
    defaultConfig {
        applicationId "com.arvifox.arvi"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
        multiDexEnabled true
        manifestPlaceholders = [googleGeoApiKey: keystoreProperties['googleGeoApiKey']]
        resConfigs "en", "fr", "ru", "en_XA", "ar_XB"
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [
                        "room.schemaLocation"  : "$projectDir/schemas".toString(),
                        "room.incremental"     : "true",
                        "room.expandProjection": "true"]
            }
        }
    }
    buildTypes {
        debug {
            pseudoLocalesEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.configrelease
        }
        applicationVariants.all { variant ->
            variant.buildConfigField "String", "ARVI_API_URL", "\"" + keystoreProperties['arviApiUrl'] + "\""
            variant.buildConfigField "String", "FLICKR_KEY", "\"" + keystoreProperties['flickrKey'] + "\""
            variant.buildConfigField "String", "TMDB_KEY", "\"" + keystoreProperties['tmdb'] + "\""
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
    dataBinding {
        enabled = true
    }
    sourceSets {
        main.res.srcDirs += ['src/main/res-some']
        main.jni.srcDirs += ['src/main/jniLibs']
        main.jniLibs.srcDirs += ['src/main/jniLibs']
    }
//    ndk {
    /*
             * Sceneform is available for the following ABIs: arm64-v8a, armv7a,
             * x86_64 and x86. This sample app enables arm64-v8a to run on
             * devices and x86 to run on the emulator. Your application should
             * list the ABIs most appropriate to minimize APK size (arm64-v8a recommended).
             */
//        abiFilters 'arm64-v8a', 'x86'
//    }
    androidExtensions {
        experimental = true
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.2.0'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'com.google.android.material:material:1.2.0-alpha05'
//    implementation 'com.google.android.material:material:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.0-beta4'
    implementation 'androidx.annotation:annotation:1.1.0'

    //test
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test:rules:1.2.0'
    androidTestImplementation 'androidx.work:work-testing:2.3.2'
    androidTestImplementation 'androidx.arch.core:core-testing:2.1.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    //multidex
    implementation 'androidx.multidex:multidex:2.0.1'

    implementation 'androidx.palette:palette:1.0.0'

    //arch
    implementation "androidx.work:work-runtime-ktx:2.3.2"
    implementation "androidx.work:work-rxjava2:2.3.2"
    androidTestImplementation "androidx.work:work-testing:2.3.2"

    //lifecycler
    def lifecycle_version = "2.2.0"
    // ViewModel and LiveData
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"
    //kapt "androidx.lifecycle:lifecycle-compiler:$lifecycle_version" // For Kotlin use kapt instead of annotationProcessor
    // alternately - if using Java8, use the following instead of lifecycle-compiler
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"
    // optional - ReactiveStreams support for LiveData
    implementation "androidx.lifecycle:lifecycle-reactivestreams-ktx:$lifecycle_version"
    // optional - Test helpers for LiveData
    testImplementation "androidx.arch.core:core-testing:2.1.0"
    implementation 'androidx.lifecycle:lifecycle-viewmodel-savedstate:1.0.0'
    // view model scope
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.2.0"
    // lifecycle scope
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.1.0"
    // livedata scope
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:2.2.0"

    def nav_version = "2.2.0-rc04"
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"

    // room

    def room_version = "2.2.3"

    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    // For Kotlin use kapt instead of annotationProcessor
    // optional - Kotlin Extensions and Coroutines support for Room
    implementation "androidx.room:room-ktx:$room_version"
    // optional - RxJava support for Room
    implementation "androidx.room:room-rxjava2:$room_version"
    // optional - Guava support for Room, including Optional and ListenableFuture
    //implementation "androidx.room:room-guava:$room_version"
    // Test helpers
    testImplementation "androidx.room:room-testing:$room_version"

    //room end

    //moshi
    implementation 'com.squareup.moshi:moshi-kotlin:1.8.0'
    kapt "com.squareup.moshi:moshi-kotlin-codegen:1.8.0"

    //retrofit okhttp
    implementation 'com.squareup.retrofit2:retrofit:2.7.1'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.7.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.7.1'
    implementation 'com.squareup.retrofit2:converter-moshi:2.6.2'
    implementation 'com.squareup.retrofit2:retrofit-mock:2.3.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.3.1'
    implementation 'com.squareup.okhttp3:okhttp:4.3.1'
    implementation "com.squareup.okhttp3:okhttp-urlconnection:4.2.2"
    implementation "com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:0.9.2"

    // AR core, Sceneform
    implementation 'com.google.ar:core:1.13.0'
    implementation("com.google.ar.sceneform:core:1.13.0")
    implementation 'com.google.ar.sceneform.ux:sceneform-ux:1.13.0'

    //firebase
    implementation 'com.google.firebase:firebase-messaging:20.1.0'
    implementation 'com.google.firebase:firebase-core:17.2.1'
    implementation 'com.google.android.gms:play-services-auth:17.0.0'
    implementation 'com.google.android.gms:play-services-base:17.1.0'
    implementation 'com.google.android.gms:play-services-gcm:17.0.0'
    implementation 'com.google.android.gms:play-services-location:17.0.0'
    implementation 'com.google.android.gms:play-services-maps:17.0.0'

    //rx
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    implementation 'io.reactivex.rxjava2:rxjava:2.2.15'
    implementation 'io.reactivex.rxjava2:rxkotlin:2.4.0'

    //concurrent
    implementation 'androidx.concurrent:concurrent-futures:1.0.0'

    // Kotlin Coroutines
    def coroutines_version = '1.3.2'
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.3"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.3"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-play-services:1.1.1"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-debug:$coroutines_version"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_version"

    //picasso
    implementation("com.squareup.picasso:picasso:2.71828") {
        exclude group: "com.android.support"
    }
    // glide
    implementation "com.github.bumptech.glide:glide:4.10.0"

    // viewpager
    implementation "androidx.viewpager2:viewpager2:1.0.0"

    //ar vr vision
    implementation 'com.google.apis:google-api-services-vision:v1-rev16-1.22.0'
    implementation('com.google.api-client:google-api-client-android:1.22.0') {
        exclude module: 'httpclient'
    }
    implementation('com.google.http-client:google-http-client-gson:1.20.0') {
        exclude module: 'httpclient'
    }

    // ConcealerNestedScrollView & ConcealerRecyclerView
    // A library to make views hide from top and bottom while scrolling a custom NestedScrollView and\or a custom RecyclerView
    // https://github.com/SIMMORSAL/ConcealerNestedScrollView-ConcealerRecyclerView
    implementation 'com.simmorsal.library:concealer_nested_scroll_view:2.0.0'
    implementation 'com.dc.easyadapter:easyadapter:2.0.3'


    // billing lib
    implementation 'com.android.billingclient:billing:2.1.0'

    // Speech SDK
    implementation 'com.microsoft.cognitiveservices.speech:client-sdk:1.8.0'

    //biometric
    def biometric_version = '1.0.1'
    implementation "androidx.biometric:biometric:$biometric_version"

    implementation 'androidx.browser:browser:1.2.0'

    // https://github.com/stfalcon-studio/StfalconImageViewer
    implementation 'com.github.stfalcon:stfalcon-imageviewer:1.0.0'

    // Play Install Referrer Library
    // https://developer.android.com/google/play/installreferrer/library.html
    implementation 'com.android.installreferrer:installreferrer:1.1.1'
}

configurations {
    all*.exclude group: 'com.google.guava', module: 'listenablefuture'
}

apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.ar.sceneform.plugin'

repositories {
    mavenCentral()
}

dokka {
    outputFormat = 'html'
    outputDirectory = "$buildDir/kotlindoc"
}


sceneform.asset('sampledata/model.fbx',
        'default',
        'sampledata/model.sfa',
        'src/main/res/raw/model')
